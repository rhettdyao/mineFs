// Code generated by protoc-gen-go. DO NOT EDIT.
// source: status_code.proto

package mineFs_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_kOK                       StatusCode = 0
	StatusCode_kNotOK                    StatusCode = 1
	StatusCode_kUnknownCs                StatusCode = 2
	StatusCode_kVersionError             StatusCode = 3
	StatusCode_kIsFollower               StatusCode = 4
	StatusCode_kInShutdownProgress       StatusCode = 5
	StatusCode_kBadParameter             StatusCode = 100
	StatusCode_kDirNotEmpty              StatusCode = 101
	StatusCode_kTargetDirExists          StatusCode = 102
	StatusCode_kFileExists               StatusCode = 103
	StatusCode_kBlockClosed              StatusCode = 104
	StatusCode_kBlockExist               StatusCode = 105
	StatusCode_kReadOnly                 StatusCode = 106
	StatusCode_kNsNotFound               StatusCode = 107
	StatusCode_kCsNotFound               StatusCode = 108
	StatusCode_kNoPermission             StatusCode = 200
	StatusCode_kNotEnoughQuota           StatusCode = 300
	StatusCode_kNetworkUnavailable       StatusCode = 400
	StatusCode_kTimeout                  StatusCode = 500
	StatusCode_kWriteError               StatusCode = 501
	StatusCode_kReadError                StatusCode = 502
	StatusCode_kNoEnoughSpace            StatusCode = 600
	StatusCode_kCsTooMuchUnfinishedWrite StatusCode = 700
	StatusCode_kCsTooMuchPendingBuffer   StatusCode = 701
	StatusCode_kGetChunkServerError      StatusCode = 702
	StatusCode_kUpdateError              StatusCode = 800
	StatusCode_kSyncMetaFailed           StatusCode = 801
	StatusCode_kSafeMode                 StatusCode = 802
	StatusCode_kServiceStop              StatusCode = 803
	StatusCode_kDirLocked                StatusCode = 804
	StatusCode_kDirUnlock                StatusCode = 805
	StatusCode_kDirLockCleaning          StatusCode = 806
)

var StatusCode_name = map[int32]string{
	0:   "kOK",
	1:   "kNotOK",
	2:   "kUnknownCs",
	3:   "kVersionError",
	4:   "kIsFollower",
	5:   "kInShutdownProgress",
	100: "kBadParameter",
	101: "kDirNotEmpty",
	102: "kTargetDirExists",
	103: "kFileExists",
	104: "kBlockClosed",
	105: "kBlockExist",
	106: "kReadOnly",
	107: "kNsNotFound",
	108: "kCsNotFound",
	200: "kNoPermission",
	300: "kNotEnoughQuota",
	400: "kNetworkUnavailable",
	500: "kTimeout",
	501: "kWriteError",
	502: "kReadError",
	600: "kNoEnoughSpace",
	700: "kCsTooMuchUnfinishedWrite",
	701: "kCsTooMuchPendingBuffer",
	702: "kGetChunkServerError",
	800: "kUpdateError",
	801: "kSyncMetaFailed",
	802: "kSafeMode",
	803: "kServiceStop",
	804: "kDirLocked",
	805: "kDirUnlock",
	806: "kDirLockCleaning",
}
var StatusCode_value = map[string]int32{
	"kOK":                       0,
	"kNotOK":                    1,
	"kUnknownCs":                2,
	"kVersionError":             3,
	"kIsFollower":               4,
	"kInShutdownProgress":       5,
	"kBadParameter":             100,
	"kDirNotEmpty":              101,
	"kTargetDirExists":          102,
	"kFileExists":               103,
	"kBlockClosed":              104,
	"kBlockExist":               105,
	"kReadOnly":                 106,
	"kNsNotFound":               107,
	"kCsNotFound":               108,
	"kNoPermission":             200,
	"kNotEnoughQuota":           300,
	"kNetworkUnavailable":       400,
	"kTimeout":                  500,
	"kWriteError":               501,
	"kReadError":                502,
	"kNoEnoughSpace":            600,
	"kCsTooMuchUnfinishedWrite": 700,
	"kCsTooMuchPendingBuffer":   701,
	"kGetChunkServerError":      702,
	"kUpdateError":              800,
	"kSyncMetaFailed":           801,
	"kSafeMode":                 802,
	"kServiceStop":              803,
	"kDirLocked":                804,
	"kDirUnlock":                805,
	"kDirLockCleaning":          806,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_status_code_febf4699d5f33eb1, []int{0}
}

type ChunkServerStatus int32

const (
	ChunkServerStatus_kCsUnkown    ChunkServerStatus = 0
	ChunkServerStatus_kCsActive    ChunkServerStatus = 101
	ChunkServerStatus_kCsWaitClean ChunkServerStatus = 102
	ChunkServerStatus_kCsCleaning  ChunkServerStatus = 103
	ChunkServerStatus_kCsOffLine   ChunkServerStatus = 104
	ChunkServerStatus_kCsStandby   ChunkServerStatus = 105
	ChunkServerStatus_kCsReadonly  ChunkServerStatus = 106
)

var ChunkServerStatus_name = map[int32]string{
	0:   "kCsUnkown",
	101: "kCsActive",
	102: "kCsWaitClean",
	103: "kCsCleaning",
	104: "kCsOffLine",
	105: "kCsStandby",
	106: "kCsReadonly",
}
var ChunkServerStatus_value = map[string]int32{
	"kCsUnkown":    0,
	"kCsActive":    101,
	"kCsWaitClean": 102,
	"kCsCleaning":  103,
	"kCsOffLine":   104,
	"kCsStandby":   105,
	"kCsReadonly":  106,
}

func (x ChunkServerStatus) String() string {
	return proto.EnumName(ChunkServerStatus_name, int32(x))
}
func (ChunkServerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_status_code_febf4699d5f33eb1, []int{1}
}

type RecoverStat int32

const (
	RecoverStat_kNotInRecover RecoverStat = 0
	RecoverStat_kLoRecover    RecoverStat = 1
	RecoverStat_kHiRecover    RecoverStat = 2
	RecoverStat_kCheck        RecoverStat = 3
	RecoverStat_kIncomplete   RecoverStat = 4
	RecoverStat_kLost         RecoverStat = 5
	RecoverStat_kBlockWriting RecoverStat = 6
	RecoverStat_kAny          RecoverStat = 20
)

var RecoverStat_name = map[int32]string{
	0:  "kNotInRecover",
	1:  "kLoRecover",
	2:  "kHiRecover",
	3:  "kCheck",
	4:  "kIncomplete",
	5:  "kLost",
	6:  "kBlockWriting",
	20: "kAny",
}
var RecoverStat_value = map[string]int32{
	"kNotInRecover": 0,
	"kLoRecover":    1,
	"kHiRecover":    2,
	"kCheck":        3,
	"kIncomplete":   4,
	"kLost":         5,
	"kBlockWriting": 6,
	"kAny":          20,
}

func (x RecoverStat) String() string {
	return proto.EnumName(RecoverStat_name, int32(x))
}
func (RecoverStat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_status_code_febf4699d5f33eb1, []int{2}
}

type SyncStatus int32

const (
	SyncStatus_kSyncWrite  SyncStatus = 0
	SyncStatus_kSyncDelete SyncStatus = 1
)

var SyncStatus_name = map[int32]string{
	0: "kSyncWrite",
	1: "kSyncDelete",
}
var SyncStatus_value = map[string]int32{
	"kSyncWrite":  0,
	"kSyncDelete": 1,
}

func (x SyncStatus) String() string {
	return proto.EnumName(SyncStatus_name, int32(x))
}
func (SyncStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_status_code_febf4699d5f33eb1, []int{3}
}

type RecoverPri int32

const (
	RecoverPri_kHigh RecoverPri = 0
	RecoverPri_kLow  RecoverPri = 1
)

var RecoverPri_name = map[int32]string{
	0: "kHigh",
	1: "kLow",
}
var RecoverPri_value = map[string]int32{
	"kHigh": 0,
	"kLow":  1,
}

func (x RecoverPri) String() string {
	return proto.EnumName(RecoverPri_name, int32(x))
}
func (RecoverPri) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_status_code_febf4699d5f33eb1, []int{4}
}

type Params struct {
	ReportInterval       int32    `protobuf:"varint,1,opt,name=report_interval,json=reportInterval" json:"report_interval,omitempty"`
	ReportSize           int32    `protobuf:"varint,2,opt,name=report_size,json=reportSize" json:"report_size,omitempty"`
	RecoverSize          int32    `protobuf:"varint,3,opt,name=recover_size,json=recoverSize" json:"recover_size,omitempty"`
	KeepaliveTimeout     int32    `protobuf:"varint,4,opt,name=keepalive_timeout,json=keepaliveTimeout" json:"keepalive_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_status_code_febf4699d5f33eb1, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Params.Unmarshal(m, b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Params.Marshal(b, m, deterministic)
}
func (dst *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(dst, src)
}
func (m *Params) XXX_Size() int {
	return xxx_messageInfo_Params.Size(m)
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetReportInterval() int32 {
	if m != nil {
		return m.ReportInterval
	}
	return 0
}

func (m *Params) GetReportSize() int32 {
	if m != nil {
		return m.ReportSize
	}
	return 0
}

func (m *Params) GetRecoverSize() int32 {
	if m != nil {
		return m.RecoverSize
	}
	return 0
}

func (m *Params) GetKeepaliveTimeout() int32 {
	if m != nil {
		return m.KeepaliveTimeout
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "mineFs.proto.Params")
	proto.RegisterEnum("mineFs.proto.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("mineFs.proto.ChunkServerStatus", ChunkServerStatus_name, ChunkServerStatus_value)
	proto.RegisterEnum("mineFs.proto.RecoverStat", RecoverStat_name, RecoverStat_value)
	proto.RegisterEnum("mineFs.proto.SyncStatus", SyncStatus_name, SyncStatus_value)
	proto.RegisterEnum("mineFs.proto.RecoverPri", RecoverPri_name, RecoverPri_value)
}

func init() { proto.RegisterFile("status_code.proto", fileDescriptor_status_code_febf4699d5f33eb1) }

var fileDescriptor_status_code_febf4699d5f33eb1 = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x54, 0xcd, 0x72, 0xe3, 0x44,
	0x10, 0xb6, 0x63, 0x5b, 0x6c, 0xda, 0xf9, 0xe9, 0x4c, 0x42, 0x6d, 0xb6, 0x8a, 0x02, 0x96, 0x0b,
	0x54, 0x28, 0xb8, 0xf0, 0x04, 0x1b, 0x25, 0x66, 0x53, 0xeb, 0xd8, 0x26, 0x8a, 0xd9, 0x63, 0x6a,
	0x22, 0xb5, 0xad, 0x61, 0xe4, 0x69, 0xd7, 0xcc, 0xc8, 0xc6, 0x7b, 0xe7, 0xce, 0x23, 0xc0, 0xf2,
	0x73, 0xe2, 0x11, 0x80, 0x33, 0x8f, 0xc0, 0x83, 0xf0, 0x73, 0xa5, 0x34, 0x92, 0xb3, 0x1c, 0xfb,
	0xd3, 0x37, 0x5f, 0x77, 0x7f, 0xdd, 0x2d, 0x38, 0x72, 0x5e, 0xfa, 0xd2, 0xdd, 0xa5, 0x9c, 0xd1,
	0xa7, 0x4b, 0xcb, 0x9e, 0xc5, 0xde, 0x42, 0x19, 0x1a, 0xb8, 0x3a, 0xfa, 0xe0, 0x75, 0x1b, 0xa2,
	0x89, 0xb4, 0x72, 0xe1, 0xc4, 0x87, 0x70, 0x68, 0x69, 0xc9, 0xd6, 0xdf, 0x29, 0xe3, 0xc9, 0xae,
	0x64, 0x71, 0xda, 0x7e, 0xbf, 0xfd, 0x51, 0xef, 0xe6, 0xa0, 0x86, 0xaf, 0x1a, 0x54, 0xbc, 0x07,
	0xfd, 0x86, 0xe8, 0xd4, 0x2b, 0x3a, 0xdd, 0x09, 0x24, 0xa8, 0xa1, 0x44, 0xbd, 0x22, 0xf1, 0x14,
	0xf6, 0x2c, 0xa5, 0xbc, 0x22, 0x5b, 0x33, 0x3a, 0x81, 0xd1, 0x6f, 0xb0, 0x40, 0xf9, 0x18, 0x8e,
	0x34, 0xd1, 0x52, 0x16, 0x6a, 0x45, 0x77, 0x5e, 0x2d, 0x88, 0x4b, 0x7f, 0xda, 0x0d, 0x3c, 0x7c,
	0xf8, 0x70, 0x5b, 0xe3, 0x67, 0xff, 0x76, 0x01, 0x92, 0xd0, 0x48, 0xcc, 0x19, 0x89, 0xb7, 0xa0,
	0xa3, 0xc7, 0x2f, 0xb0, 0x25, 0x00, 0x22, 0x3d, 0x62, 0x3f, 0x7e, 0x81, 0x6d, 0x71, 0x00, 0xa0,
	0xa7, 0x46, 0x1b, 0x5e, 0x9b, 0xd8, 0xe1, 0x8e, 0x38, 0x82, 0x7d, 0xfd, 0x25, 0x59, 0xa7, 0xd8,
	0x5c, 0x5a, 0xcb, 0x16, 0x3b, 0xe2, 0x10, 0xfa, 0xfa, 0xca, 0x0d, 0xb8, 0x28, 0x78, 0x4d, 0x16,
	0xbb, 0xe2, 0x31, 0x1c, 0xeb, 0x2b, 0x93, 0xe4, 0xa5, 0xcf, 0x78, 0x6d, 0x26, 0x96, 0xe7, 0x96,
	0x9c, 0xc3, 0x5e, 0x78, 0x7c, 0x2e, 0xb3, 0x60, 0x0c, 0x79, 0xb2, 0x98, 0x09, 0x84, 0x3d, 0x7d,
	0xa1, 0xec, 0x88, 0xfd, 0xe5, 0x62, 0xe9, 0x37, 0x48, 0xe2, 0x04, 0x50, 0xdf, 0x4a, 0x3b, 0x27,
	0x7f, 0xa1, 0xec, 0xe5, 0xd7, 0xca, 0x79, 0x87, 0xb3, 0x90, 0x64, 0xa0, 0x0a, 0x6a, 0x80, 0x79,
	0x78, 0x78, 0x5e, 0x70, 0xaa, 0xe3, 0x82, 0x1d, 0x65, 0x98, 0x07, 0x4a, 0x40, 0x02, 0x07, 0x95,
	0xd8, 0x87, 0x5d, 0x7d, 0x43, 0x32, 0x1b, 0x9b, 0x62, 0x83, 0x5f, 0x85, 0xef, 0x23, 0x37, 0x62,
	0x3f, 0xe0, 0xd2, 0x64, 0xa8, 0x03, 0x10, 0xbf, 0x01, 0x0a, 0x21, 0x60, 0x5f, 0x8f, 0x78, 0x42,
	0x76, 0xa1, 0x5c, 0xd5, 0x21, 0xfe, 0xd1, 0x16, 0x27, 0x70, 0x58, 0x99, 0x71, 0x69, 0xb8, 0x9c,
	0xe7, 0x5f, 0x94, 0xec, 0x25, 0xfe, 0xb2, 0x23, 0x4e, 0xe1, 0x58, 0x8f, 0xc8, 0xaf, 0xd9, 0xea,
	0xa9, 0x91, 0x2b, 0xa9, 0x0a, 0x79, 0x5f, 0x10, 0x7e, 0xdb, 0x11, 0xfb, 0xf0, 0x48, 0x37, 0x06,
	0xe3, 0x5f, 0x1d, 0x81, 0xd0, 0xd7, 0x2f, 0xad, 0xf2, 0x54, 0xbb, 0xf5, 0x77, 0x65, 0x17, 0x84,
	0xaa, 0x6a, 0xe0, 0x9f, 0x8e, 0x38, 0x86, 0x03, 0x3d, 0xe2, 0x3a, 0x41, 0xb2, 0x94, 0x29, 0xe1,
	0x9f, 0x5d, 0xf1, 0x2e, 0x3c, 0xd1, 0xb1, 0xbb, 0x65, 0xbe, 0x2e, 0xd3, 0x7c, 0x6a, 0x66, 0xca,
	0x28, 0x97, 0x53, 0x16, 0xa4, 0xf0, 0xd7, 0x9e, 0x78, 0x07, 0x1e, 0xbf, 0xf9, 0x3e, 0x21, 0x93,
	0x29, 0x33, 0x3f, 0x2f, 0x67, 0x33, 0xb2, 0xf8, 0x5b, 0x4f, 0x3c, 0x81, 0x13, 0xfd, 0x39, 0xf9,
	0x38, 0x2f, 0x8d, 0x4e, 0xc8, 0xae, 0xc8, 0xd6, 0xd9, 0x7e, 0xaf, 0x66, 0xb0, 0xa7, 0xa7, 0xcb,
	0x4c, 0x6e, 0x2b, 0xfa, 0x2e, 0x0a, 0x2d, 0x26, 0x1b, 0x93, 0x5e, 0x93, 0x97, 0x03, 0xa9, 0x0a,
	0xca, 0xf0, 0xfb, 0x48, 0x1c, 0xc0, 0xae, 0x4e, 0xe4, 0x8c, 0xae, 0x39, 0x23, 0x7c, 0x1d, 0x85,
	0x87, 0x95, 0x96, 0x4a, 0x29, 0xf1, 0xbc, 0xc4, 0x1f, 0xa2, 0xd0, 0xca, 0x85, 0xb2, 0x43, 0x4e,
	0x35, 0x65, 0xf8, 0xe3, 0x03, 0x30, 0x35, 0xd5, 0x18, 0xf0, 0xa7, 0x48, 0xbc, 0x0d, 0xb8, 0x65,
	0xc4, 0x05, 0x49, 0xa3, 0xcc, 0x1c, 0x7f, 0x8e, 0xce, 0xbe, 0x69, 0xc3, 0xd1, 0xff, 0x8a, 0xab,
	0x97, 0x30, 0xcc, 0x2b, 0x76, 0x53, 0xa3, 0x79, 0x6d, 0xb0, 0xd5, 0x84, 0xcf, 0x52, 0xaf, 0x56,
	0x84, 0x14, 0x06, 0x1e, 0xbb, 0x97, 0x52, 0xf9, 0xa0, 0xd4, 0xec, 0x44, 0xec, 0x1e, 0x74, 0xe7,
	0x61, 0x59, 0x63, 0x37, 0x9e, 0xcd, 0x86, 0xca, 0x10, 0xe6, 0x4d, 0x9c, 0x78, 0x69, 0xb2, 0xfb,
	0x0d, 0xaa, 0xe6, 0x41, 0x65, 0x3e, 0x87, 0x95, 0xa8, 0xea, 0xe8, 0xdf, 0x34, 0xe7, 0xe3, 0xa5,
	0x0f, 0x0b, 0x3a, 0x62, 0x7f, 0x65, 0x1a, 0x10, 0x5b, 0x41, 0x63, 0xc8, 0xdb, 0xb8, 0x3e, 0x88,
	0xe7, 0x6a, 0x1b, 0xef, 0x84, 0x63, 0x89, 0x73, 0x4a, 0xf5, 0xf6, 0x12, 0x4c, 0xca, 0x8b, 0x65,
	0x41, 0x9e, 0xb0, 0x2b, 0x76, 0xa1, 0xa7, 0x87, 0xec, 0xfc, 0x76, 0xf7, 0x2b, 0x5b, 0xaa, 0x11,
	0x56, 0xe5, 0x46, 0xe2, 0x11, 0x74, 0xf5, 0x33, 0xb3, 0xc1, 0x93, 0xb3, 0x4f, 0x00, 0xaa, 0x01,
	0x34, 0x3e, 0x54, 0x29, 0xaa, 0xb0, 0x1e, 0x76, 0x2b, 0xc8, 0x56, 0xf1, 0x05, 0x05, 0xd9, 0xf6,
	0xd9, 0x53, 0x80, 0xa6, 0x80, 0x89, 0x55, 0x21, 0xc9, 0x73, 0x35, 0xcf, 0xb1, 0x15, 0x14, 0x87,
	0xbc, 0xc6, 0xf6, 0x7d, 0x14, 0xfe, 0x43, 0x9f, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x12, 0x68,
	0x61, 0xff, 0xaa, 0x04, 0x00, 0x00,
}
