// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chunkserver.proto

package mineFs_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WriteBlockRequest struct {
	SeqId                int64    `protobuf:"varint,1,opt,name=seq_id,json=seqId" json:"seq_id,omitempty"`
	BlockId              int64    `protobuf:"varint,2,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	Offset               int64    `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	PacketSeq            int32    `protobuf:"varint,4,opt,name=packet_seq,json=packetSeq" json:"packet_seq,omitempty"`
	Databuf              []byte   `protobuf:"bytes,5,opt,name=databuf,proto3" json:"databuf,omitempty"`
	Chunkservers         []string `protobuf:"bytes,6,rep,name=chunkservers" json:"chunkservers,omitempty"`
	IsLast               bool     `protobuf:"varint,7,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	Desc                 []string `protobuf:"bytes,8,rep,name=desc" json:"desc,omitempty"`
	Timestamp            []int64  `protobuf:"varint,9,rep,packed,name=timestamp" json:"timestamp,omitempty"`
	RecoverVersion       int32    `protobuf:"varint,10,opt,name=recover_version,json=recoverVersion" json:"recover_version,omitempty"`
	SyncOnClose          bool     `protobuf:"varint,11,opt,name=sync_on_close,json=syncOnClose" json:"sync_on_close,omitempty"`
	TotalSize            int64    `protobuf:"varint,15,opt,name=total_size,json=totalSize" json:"total_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteBlockRequest) Reset()         { *m = WriteBlockRequest{} }
func (m *WriteBlockRequest) String() string { return proto.CompactTextString(m) }
func (*WriteBlockRequest) ProtoMessage()    {}
func (*WriteBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkserver_f31603b1cc6cfcc7, []int{0}
}
func (m *WriteBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteBlockRequest.Unmarshal(m, b)
}
func (m *WriteBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteBlockRequest.Marshal(b, m, deterministic)
}
func (dst *WriteBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteBlockRequest.Merge(dst, src)
}
func (m *WriteBlockRequest) XXX_Size() int {
	return xxx_messageInfo_WriteBlockRequest.Size(m)
}
func (m *WriteBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteBlockRequest proto.InternalMessageInfo

func (m *WriteBlockRequest) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *WriteBlockRequest) GetBlockId() int64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

func (m *WriteBlockRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *WriteBlockRequest) GetPacketSeq() int32 {
	if m != nil {
		return m.PacketSeq
	}
	return 0
}

func (m *WriteBlockRequest) GetDatabuf() []byte {
	if m != nil {
		return m.Databuf
	}
	return nil
}

func (m *WriteBlockRequest) GetChunkservers() []string {
	if m != nil {
		return m.Chunkservers
	}
	return nil
}

func (m *WriteBlockRequest) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func (m *WriteBlockRequest) GetDesc() []string {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *WriteBlockRequest) GetTimestamp() []int64 {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *WriteBlockRequest) GetRecoverVersion() int32 {
	if m != nil {
		return m.RecoverVersion
	}
	return 0
}

func (m *WriteBlockRequest) GetSyncOnClose() bool {
	if m != nil {
		return m.SyncOnClose
	}
	return false
}

func (m *WriteBlockRequest) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

type WriteBlockResponse struct {
	SeqId                int64      `protobuf:"varint,1,opt,name=seq_id,json=seqId" json:"seq_id,omitempty"`
	Err                  StatusCode `protobuf:"varint,2,opt,name=err,enum=mineFs.proto.StatusCode" json:"err,omitempty"`
	BadChunkserver       string     `protobuf:"bytes,3,opt,name=bad_chunkserver,json=badChunkserver" json:"bad_chunkserver,omitempty"`
	CurSize              int64      `protobuf:"varint,4,opt,name=cur_size,json=curSize" json:"cur_size,omitempty"`
	CurSeq               int32      `protobuf:"varint,5,opt,name=cur_seq,json=curSeq" json:"cur_seq,omitempty"`
	Desc                 []string   `protobuf:"bytes,6,rep,name=desc" json:"desc,omitempty"`
	Timestamp            int64      `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *WriteBlockResponse) Reset()         { *m = WriteBlockResponse{} }
func (m *WriteBlockResponse) String() string { return proto.CompactTextString(m) }
func (*WriteBlockResponse) ProtoMessage()    {}
func (*WriteBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkserver_f31603b1cc6cfcc7, []int{1}
}
func (m *WriteBlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteBlockResponse.Unmarshal(m, b)
}
func (m *WriteBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteBlockResponse.Marshal(b, m, deterministic)
}
func (dst *WriteBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteBlockResponse.Merge(dst, src)
}
func (m *WriteBlockResponse) XXX_Size() int {
	return xxx_messageInfo_WriteBlockResponse.Size(m)
}
func (m *WriteBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteBlockResponse proto.InternalMessageInfo

func (m *WriteBlockResponse) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *WriteBlockResponse) GetErr() StatusCode {
	if m != nil {
		return m.Err
	}
	return StatusCode_kOK
}

func (m *WriteBlockResponse) GetBadChunkserver() string {
	if m != nil {
		return m.BadChunkserver
	}
	return ""
}

func (m *WriteBlockResponse) GetCurSize() int64 {
	if m != nil {
		return m.CurSize
	}
	return 0
}

func (m *WriteBlockResponse) GetCurSeq() int32 {
	if m != nil {
		return m.CurSeq
	}
	return 0
}

func (m *WriteBlockResponse) GetDesc() []string {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *WriteBlockResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ReadBlockRequest struct {
	SeqId                int64    `protobuf:"varint,1,opt,name=seq_id,json=seqId" json:"seq_id,omitempty"`
	BlockId              int64    `protobuf:"varint,2,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	Offset               int64    `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	ReadLen              int32    `protobuf:"varint,4,opt,name=read_len,json=readLen" json:"read_len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadBlockRequest) Reset()         { *m = ReadBlockRequest{} }
func (m *ReadBlockRequest) String() string { return proto.CompactTextString(m) }
func (*ReadBlockRequest) ProtoMessage()    {}
func (*ReadBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkserver_f31603b1cc6cfcc7, []int{2}
}
func (m *ReadBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadBlockRequest.Unmarshal(m, b)
}
func (m *ReadBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadBlockRequest.Marshal(b, m, deterministic)
}
func (dst *ReadBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadBlockRequest.Merge(dst, src)
}
func (m *ReadBlockRequest) XXX_Size() int {
	return xxx_messageInfo_ReadBlockRequest.Size(m)
}
func (m *ReadBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadBlockRequest proto.InternalMessageInfo

func (m *ReadBlockRequest) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *ReadBlockRequest) GetBlockId() int64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

func (m *ReadBlockRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadBlockRequest) GetReadLen() int32 {
	if m != nil {
		return m.ReadLen
	}
	return 0
}

type ReadBlockResponse struct {
	SeqId                int64      `protobuf:"varint,1,opt,name=seq_id,json=seqId" json:"seq_id,omitempty"`
	Err                  StatusCode `protobuf:"varint,2,opt,name=err,enum=mineFs.proto.StatusCode" json:"err,omitempty"`
	Databuf              []byte     `protobuf:"bytes,3,opt,name=databuf,proto3" json:"databuf,omitempty"`
	Timestamp            []int64    `protobuf:"varint,4,rep,packed,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReadBlockResponse) Reset()         { *m = ReadBlockResponse{} }
func (m *ReadBlockResponse) String() string { return proto.CompactTextString(m) }
func (*ReadBlockResponse) ProtoMessage()    {}
func (*ReadBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkserver_f31603b1cc6cfcc7, []int{3}
}
func (m *ReadBlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadBlockResponse.Unmarshal(m, b)
}
func (m *ReadBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadBlockResponse.Marshal(b, m, deterministic)
}
func (dst *ReadBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadBlockResponse.Merge(dst, src)
}
func (m *ReadBlockResponse) XXX_Size() int {
	return xxx_messageInfo_ReadBlockResponse.Size(m)
}
func (m *ReadBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadBlockResponse proto.InternalMessageInfo

func (m *ReadBlockResponse) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *ReadBlockResponse) GetErr() StatusCode {
	if m != nil {
		return m.Err
	}
	return StatusCode_kOK
}

func (m *ReadBlockResponse) GetDatabuf() []byte {
	if m != nil {
		return m.Databuf
	}
	return nil
}

func (m *ReadBlockResponse) GetTimestamp() []int64 {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type GetBlockInfoRequest struct {
	SeqId                int64    `protobuf:"varint,1,opt,name=seq_id,json=seqId" json:"seq_id,omitempty"`
	BlockId              int64    `protobuf:"varint,2,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlockInfoRequest) Reset()         { *m = GetBlockInfoRequest{} }
func (m *GetBlockInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockInfoRequest) ProtoMessage()    {}
func (*GetBlockInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkserver_f31603b1cc6cfcc7, []int{4}
}
func (m *GetBlockInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBlockInfoRequest.Unmarshal(m, b)
}
func (m *GetBlockInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBlockInfoRequest.Marshal(b, m, deterministic)
}
func (dst *GetBlockInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockInfoRequest.Merge(dst, src)
}
func (m *GetBlockInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetBlockInfoRequest.Size(m)
}
func (m *GetBlockInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockInfoRequest proto.InternalMessageInfo

func (m *GetBlockInfoRequest) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *GetBlockInfoRequest) GetBlockId() int64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

type GetBlockInfoResponse struct {
	SeqId                int64      `protobuf:"varint,1,opt,name=seq_id,json=seqId" json:"seq_id,omitempty"`
	Err                  StatusCode `protobuf:"varint,2,opt,name=err,enum=mineFs.proto.StatusCode" json:"err,omitempty"`
	BlockSize            int64      `protobuf:"varint,3,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	Timestamp            []int64    `protobuf:"varint,4,rep,packed,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetBlockInfoResponse) Reset()         { *m = GetBlockInfoResponse{} }
func (m *GetBlockInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockInfoResponse) ProtoMessage()    {}
func (*GetBlockInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_chunkserver_f31603b1cc6cfcc7, []int{5}
}
func (m *GetBlockInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBlockInfoResponse.Unmarshal(m, b)
}
func (m *GetBlockInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBlockInfoResponse.Marshal(b, m, deterministic)
}
func (dst *GetBlockInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockInfoResponse.Merge(dst, src)
}
func (m *GetBlockInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetBlockInfoResponse.Size(m)
}
func (m *GetBlockInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockInfoResponse proto.InternalMessageInfo

func (m *GetBlockInfoResponse) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *GetBlockInfoResponse) GetErr() StatusCode {
	if m != nil {
		return m.Err
	}
	return StatusCode_kOK
}

func (m *GetBlockInfoResponse) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *GetBlockInfoResponse) GetTimestamp() []int64 {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*WriteBlockRequest)(nil), "mineFs.proto.WriteBlockRequest")
	proto.RegisterType((*WriteBlockResponse)(nil), "mineFs.proto.WriteBlockResponse")
	proto.RegisterType((*ReadBlockRequest)(nil), "mineFs.proto.ReadBlockRequest")
	proto.RegisterType((*ReadBlockResponse)(nil), "mineFs.proto.ReadBlockResponse")
	proto.RegisterType((*GetBlockInfoRequest)(nil), "mineFs.proto.GetBlockInfoRequest")
	proto.RegisterType((*GetBlockInfoResponse)(nil), "mineFs.proto.GetBlockInfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChunkServerClient is the client API for ChunkServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChunkServerClient interface {
	WriteBlock(ctx context.Context, in *WriteBlockRequest, opts ...grpc.CallOption) (*WriteBlockResponse, error)
	ReadBlock(ctx context.Context, in *ReadBlockRequest, opts ...grpc.CallOption) (*ReadBlockResponse, error)
	GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*GetBlockInfoResponse, error)
}

type chunkServerClient struct {
	cc *grpc.ClientConn
}

func NewChunkServerClient(cc *grpc.ClientConn) ChunkServerClient {
	return &chunkServerClient{cc}
}

func (c *chunkServerClient) WriteBlock(ctx context.Context, in *WriteBlockRequest, opts ...grpc.CallOption) (*WriteBlockResponse, error) {
	out := new(WriteBlockResponse)
	err := c.cc.Invoke(ctx, "/mineFs.proto.ChunkServer/WriteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerClient) ReadBlock(ctx context.Context, in *ReadBlockRequest, opts ...grpc.CallOption) (*ReadBlockResponse, error) {
	out := new(ReadBlockResponse)
	err := c.cc.Invoke(ctx, "/mineFs.proto.ChunkServer/ReadBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerClient) GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*GetBlockInfoResponse, error) {
	out := new(GetBlockInfoResponse)
	err := c.cc.Invoke(ctx, "/mineFs.proto.ChunkServer/GetBlockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChunkServer service

type ChunkServerServer interface {
	WriteBlock(context.Context, *WriteBlockRequest) (*WriteBlockResponse, error)
	ReadBlock(context.Context, *ReadBlockRequest) (*ReadBlockResponse, error)
	GetBlockInfo(context.Context, *GetBlockInfoRequest) (*GetBlockInfoResponse, error)
}

func RegisterChunkServerServer(s *grpc.Server, srv ChunkServerServer) {
	s.RegisterService(&_ChunkServer_serviceDesc, srv)
}

func _ChunkServer_WriteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).WriteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mineFs.proto.ChunkServer/WriteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).WriteBlock(ctx, req.(*WriteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServer_ReadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).ReadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mineFs.proto.ChunkServer/ReadBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).ReadBlock(ctx, req.(*ReadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServer_GetBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).GetBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mineFs.proto.ChunkServer/GetBlockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).GetBlockInfo(ctx, req.(*GetBlockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChunkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mineFs.proto.ChunkServer",
	HandlerType: (*ChunkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteBlock",
			Handler:    _ChunkServer_WriteBlock_Handler,
		},
		{
			MethodName: "ReadBlock",
			Handler:    _ChunkServer_ReadBlock_Handler,
		},
		{
			MethodName: "GetBlockInfo",
			Handler:    _ChunkServer_GetBlockInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chunkserver.proto",
}

func init() { proto.RegisterFile("chunkserver.proto", fileDescriptor_chunkserver_f31603b1cc6cfcc7) }

var fileDescriptor_chunkserver_f31603b1cc6cfcc7 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0xeb, 0xc4, 0x8e, 0x6f, 0xf2, 0xa5, 0x5f, 0x86, 0xbf, 0x69, 0x44, 0xa9, 0xf1, 0x06,
	0x8b, 0x45, 0x16, 0xe5, 0x0d, 0x88, 0x44, 0x15, 0x29, 0x52, 0x25, 0x47, 0xc0, 0xd2, 0x9a, 0xd8,
	0x37, 0xc2, 0x4a, 0xe2, 0x89, 0x67, 0xc6, 0x45, 0x74, 0xcb, 0x9e, 0x25, 0x8f, 0xc8, 0x9e, 0x37,
	0x40, 0x33, 0x76, 0x1b, 0xbb, 0x90, 0x2e, 0x50, 0xd9, 0xf9, 0x9e, 0x7b, 0xe7, 0xfe, 0x9c, 0x73,
	0x64, 0x18, 0x25, 0x9f, 0xca, 0x7c, 0x2d, 0x51, 0x5c, 0xa1, 0x98, 0xec, 0x04, 0x57, 0x9c, 0x0c,
	0xb6, 0x59, 0x8e, 0xef, 0x64, 0x15, 0x8d, 0x47, 0x52, 0x31, 0x55, 0xca, 0x38, 0xe1, 0x29, 0x56,
	0x50, 0xf0, 0xf3, 0x08, 0x46, 0x1f, 0x45, 0xa6, 0xf0, 0xed, 0x86, 0x27, 0xeb, 0x08, 0x8b, 0x12,
	0xa5, 0x22, 0x4f, 0xc0, 0x91, 0x58, 0xc4, 0x59, 0x4a, 0x2d, 0xdf, 0x0a, 0xed, 0xa8, 0x2b, 0xb1,
	0x98, 0xa5, 0xe4, 0x04, 0x7a, 0x4b, 0x5d, 0xa6, 0x13, 0x47, 0x26, 0xe1, 0x9a, 0x78, 0x96, 0x92,
	0xa7, 0xe0, 0xf0, 0xd5, 0x4a, 0xa2, 0xa2, 0xb6, 0x49, 0xd4, 0x11, 0x39, 0x05, 0xd8, 0xb1, 0x64,
	0x8d, 0x2a, 0x96, 0x58, 0xd0, 0x8e, 0x6f, 0x85, 0xdd, 0xc8, 0xab, 0x90, 0x05, 0x16, 0x84, 0x82,
	0x9b, 0x32, 0xc5, 0x96, 0xe5, 0x8a, 0x76, 0x7d, 0x2b, 0x1c, 0x44, 0x37, 0x21, 0x09, 0x60, 0xd0,
	0x38, 0x47, 0x52, 0xc7, 0xb7, 0x43, 0x2f, 0x6a, 0x61, 0xe4, 0x19, 0xb8, 0x99, 0x8c, 0x37, 0x4c,
	0x2a, 0xea, 0xfa, 0x56, 0xd8, 0x8b, 0x9c, 0x4c, 0xce, 0x99, 0x54, 0x84, 0x40, 0x27, 0x45, 0x99,
	0xd0, 0x9e, 0x79, 0x64, 0xbe, 0xc9, 0x73, 0xf0, 0x54, 0xb6, 0x45, 0xa9, 0xd8, 0x76, 0x47, 0x3d,
	0xdf, 0x0e, 0xed, 0x68, 0x0f, 0x90, 0x57, 0x70, 0x2c, 0x30, 0xe1, 0x57, 0x28, 0x62, 0xdd, 0x3a,
	0xe3, 0x39, 0x05, 0xb3, 0xec, 0xb0, 0x86, 0x3f, 0x54, 0x28, 0x09, 0xe0, 0x3f, 0xf9, 0x25, 0x4f,
	0x62, 0x9e, 0xc7, 0xc9, 0x86, 0x4b, 0xa4, 0x7d, 0x33, 0xb9, 0xaf, 0xc1, 0xcb, 0x7c, 0xaa, 0x21,
	0x7d, 0xb4, 0xe2, 0x8a, 0x6d, 0x62, 0x99, 0x5d, 0x23, 0x3d, 0x36, 0x84, 0x78, 0x06, 0x59, 0x64,
	0xd7, 0x18, 0xfc, 0xb0, 0x80, 0x34, 0x39, 0x97, 0x3b, 0x9e, 0x4b, 0x3c, 0x44, 0xfa, 0x6b, 0xb0,
	0x51, 0x08, 0xc3, 0xf7, 0xf0, 0x9c, 0x4e, 0x9a, 0x82, 0x4e, 0x16, 0x46, 0xcf, 0x29, 0x4f, 0x31,
	0xd2, 0x45, 0xfa, 0x8a, 0x25, 0x4b, 0xe3, 0x06, 0x49, 0x46, 0x0e, 0x2f, 0x1a, 0x2e, 0x59, 0x3a,
	0xdd, 0xa3, 0x5a, 0xc9, 0xa4, 0x14, 0xd5, 0x7e, 0x9d, 0x4a, 0xc9, 0xa4, 0x14, 0x7a, 0x3b, 0x4d,
	0xaa, 0x49, 0x61, 0x61, 0x24, 0xe9, 0x46, 0x8e, 0xce, 0x60, 0x71, 0x4b, 0xaa, 0x73, 0x88, 0x54,
	0xb7, 0x3e, 0xf4, 0x06, 0x08, 0x3e, 0xc3, 0xff, 0x11, 0xb2, 0xf4, 0x1f, 0x59, 0xeb, 0x04, 0x7a,
	0x02, 0x59, 0x1a, 0x6f, 0x30, 0xaf, 0x8d, 0xe5, 0xea, 0x78, 0x8e, 0x79, 0xf0, 0xcd, 0x82, 0x51,
	0x63, 0xf2, 0xc3, 0x11, 0xdc, 0xf0, 0xab, 0xdd, 0xf6, 0x6b, 0x8b, 0x89, 0xce, 0x1d, 0x7b, 0x05,
	0x17, 0xf0, 0xe8, 0x02, 0x95, 0x59, 0x67, 0x96, 0xaf, 0xf8, 0x5f, 0x93, 0x11, 0x7c, 0xb7, 0xe0,
	0x71, 0xbb, 0xd3, 0xc3, 0x1d, 0x77, 0x0a, 0x50, 0x8d, 0x35, 0xb6, 0xa8, 0xc8, 0xf6, 0x0c, 0x62,
	0x8c, 0x71, 0xef, 0x85, 0xe7, 0x5f, 0x8f, 0xa0, 0x6f, 0x1c, 0xb6, 0xa8, 0x1c, 0x76, 0x09, 0xb0,
	0xf7, 0x38, 0x39, 0x6b, 0x4f, 0xfe, 0xed, 0x8f, 0x33, 0xf6, 0x0f, 0x17, 0xd4, 0x07, 0xce, 0xc1,
	0xbb, 0x95, 0x94, 0xbc, 0x68, 0x97, 0xdf, 0x75, 0xd9, 0xf8, 0xec, 0x60, 0xbe, 0xee, 0xf6, 0x1e,
	0x06, 0x4d, 0x1a, 0xc9, 0xcb, 0xf6, 0x83, 0x3f, 0x88, 0x35, 0x0e, 0xee, 0x2b, 0xa9, 0xda, 0x2e,
	0x1d, 0x93, 0x7b, 0xf3, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xb6, 0xf1, 0xcc, 0x8b, 0x05, 0x00,
	0x00,
}
